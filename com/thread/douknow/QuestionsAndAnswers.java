package com.thread.douknow;

public class QuestionsAndAnswers {
	
/*
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1. Creating and Running a thread ?
 
 public class Worker implements Runnable {
    public void run(){
      System.out.println("Yes the thread is running");
    }
 }
 
 public static void main(String[] arg){
   Worker workerObj = new Worker();
   Thread thread = new Thread(workerObj);
   thread.start();  // another stack of execution is started.
   
   // thread.setName(),setID(),setPriorities(),setDeamon(true),getStatus()
   
   // calling thread.run() will invoke the run method but it wont create another stack of execution.
   
   // thread.start();   You can not start it again , this is wrong.
    
   thread.join();  // means the main thread will wait for the created child thread to finish first.
 
 }
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 2. Graceful shutdown of thread (best practices).
 
    There are are few good ways to stop a executing an atomic operation getting executed by thread.
 
    a. use a volatile boolean variable in your run method before executing the atomic operation.
 
    e.g  
    public class FileSearch implements Runnable {
     private volatile boolean continue = true;
     
     public void run(){
       String fileName = ...... find out the file name.
       while(continue){
          searchWordInFile(fileName);  // here if we cancel the operation it will not proceed to the next file but it will complete the atomic operation of searching in file for sure.
       }
     }
     
     public void cancel(){
       continue = false;
     }
    
    }
 
 
    b. Using the the interruption.
     public class FileSearch extends Thread {
     
     public void run(){
       String fileName = ...... find out the file name.
       while(!Thread.currentThread().isInterrupted()){
          searchWordInFile(fileName);  // here if we cancel the operation it will not proceed to the next file but it will complete the atomic operation of searching in file for sure.
       }
     }
     
     public void cancel(){
      interrupt();
     }
    
    }
    
   
    c. Using Future for timed execution of atomic operation.
    
	    public static void timedRunUsingFuture(Runnable r, long timeout, TimeUnit unit) throws InterruptedException{
			
			Future<?> futureTask = executorService.submit(r);
			
			try {
				futureTask.get(timeout,unit);
			} catch ( TimeoutException e) {
				throw new InterruptedException();
			} catch (ExecutionException e){
				
			} finally {
				futureTask.cancel(true);
			}
			
		}
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 3. How should you write your main method to call interruption.
 
 public static void main(String[] arg){
 
   FileSearch search = new FileSearch();
   Thread task = new Thread(search;
   
   task.start(); // Ok search has started.
   
   try{
      TimeUnit.SECOND.sleep(10);  // let wait for 10 second to get it executed, after that i dont bother i should cancel it.
   }catch(InteruptedException ex){
      // swallow it.
   }
   
   task.interrupt().  // so  your thread class atomic function should handle the Interrupted exception so that system complete meaningful work. (Ideally it should does its work and throw back the exception.)
   
   or 
   
   search.cancel() ;  // can be implemented using volatile or checking if thread is interrupted or using Future object to gracefully handle the interruption.
 
 }
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 4. What kind of  work you want to perform by making the thread as deamon. (i.e when a thread is a good candidate to be a deamon thread)
 
  If your thread does not require any IO/Resource related work e.g health check of the system etc and sending notification to another system.
  (Deamon thread should always run and we can ad shut down hook to terminate it correctly when JVM is going down.)
 e.g 
 
 public class LogWriter extends Thread {
 
   LogWriter(){
    setDeamon(true);
   }
   
   public void run(){
      while(true){
         // health check of the system from some Singleton class and sending info... 
      }
   }
 
 }
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 5. How to handle checked exception in thread ?
    Using setUncaughtExceptionHandler from the thread class.
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 6. How do use a Single variable inside a thread not to be shared across the thread.
    Using ThreadLocal variable
    
    private static ThreadLocal<Date>  startDate = new ThreadLocal<Date>(){
      protected Date initialValue(){
        return new Date();
      }
    };
    
    now the variable startDate can be used across other threads to have its own unique non sharable value.
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 7. How do we control similar kinds of thread with out manipulating each one of them for interruption etc.
    Using ThreadGroup.
    
    ThreadGroup group = new ThreadGroup("LoggerGroup");
    Thread thread1 = new Thread(group,emailLoggerTask);
    Thread thread2 = new Thread(group,fileLoggerTask);
    
    group.interupt();  // to stop them all at once.
    group.list();
    group.enumerate();
    
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 8. ThreadFactory   --  Create a class extending from ThreadFactory and implement newThread API
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 9. Using Synchronized key word - Producer and Consumer problem using wait ,notifyAll api.
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 10. Lock API
 
    a.It has in built performance benefit over synchronized from JVM point of view.
    b.It allows separation between read/write operation.
    c.It offers tryLock and time out on getting lock. (to avoid dead lock use it extensively)
    d.Useful for complex structures.
    
    The implementation is ReentrantLock / ReentrantReadWriteLock
    
    ReentrantLock has lock/unloack api
    
    ReentrantReadWriteLock readLock().lock() and writeLock().lock() api
    
    Both the ReentrantLock / ReentrantReadWriteLock has fairNess attribute which allows the longer waiting thread to get a chance to lock.
    
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 11 . Using Condition (Implement Producer and Consumer problem using Condition)
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 12. what is IllegalMonitorStateException ? 
     While wait or notify on some particular thread if it not bounded by synchronized blocked then this exception is thrown.
 ---------------------------------------------------------------------------Thread Synchronizer---------------------------------------------------------------------------------------------
 13. Semaphore (Restricting the usage of resource)
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 14. CountDownLatch (Waiting for multiple concurrent events)
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 15. Cyclic Barrier (Waiting for multiple concurrent events and drawing single conclusion on them e.g first divide and calculate and then conquer)
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 16. Phaser (Waiting for concurrent event but in a phased manner)
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 */
}
